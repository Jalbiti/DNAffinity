# -*- coding: utf-8 -*-
"""selex_regressor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lWGrM2eV1PV-WeWPNq03o0IcdCRWGF31
"""

# conda code v1

# !pip install biopython
# !pip install folium
# !curl -O https://raw.githubusercontent.com/jperkel/example_notebook/master/NC_005816.gb


######### ALIGNMENT WORKFLOW #########

import sys
import numpy as np
import time
import pandas as pd
import matplotlib.pyplot as plt

from collections import defaultdict
from itertools import product

from dataset import Dataset
from model import Model


protein = sys.argv[1]
cycle = sys.argv[2]

deca = pd.read_csv(f'reduced_selex_results_rohs/{protein}/{cycle}.txt', sep='\t')

strings = list(deca["Kmer"])
values = list(deca["Affinity"])
# counts = list(deca["ExpectedCount"])
counts = list(deca["ObservedCount"])
prob = list(deca["Probability"])

# rohs' undersampling

# count_bound = sorted(counts)[int(len(counts)*0.9)]
# count_bound = 100
# prob_bound = 10e-7
prob_bound = sorted(prob)[int(len(prob)*0.9)]

mat = []
for i in np.arange(0, len(prob)):
    if prob[i] > prob_bound:
        mat.append([strings[i], values[i]])

# ordered

with open(f'output_rohs/{protein}/{protein}_training_ordered.txt', 'w') as file:
    file.write('ID_REF\tVALUE\n')

with open(f'output_rohs/{protein}/{protein}_training_ordered.txt', 'a') as file:
    for vector in mat:
        file.write("%s\t" % vector[0])
        file.write("%s\n" % vector[1])

# writes the randomized file ready for training

np.random.shuffle(mat)

with open(f'output_rohs/{protein}/SELEX_training.txt', 'w') as file:
    file.write('ID_REF\tVALUE\n')

with open(f'output_rohs/{protein}/SELEX_training.txt', 'a') as file:
    for vector in mat:
        file.write("%s\t" % vector[0])
        file.write("%s\n" % vector[1])

# electrostatic feature
every_tetramer = [''.join(c) for c in product('ACGT', repeat=4)]
every_tetramer_dict = {}
electrostatic_dict = {'A': np.array([-1, 1, -1, 1, 0]), 'C': np.array([0, 1, -1, -1, 1]),
                      'G': np.array([-1, -1, 1, 0, 1]), 'T': np.array([1, -1, 1, -1, 0])}

for tetramer in every_tetramer:
    aux = np.array([0, 0, 0, 0, 0])
    for i in range(4):
        aux = aux + electrostatic_dict[tetramer[i]]
    every_tetramer_dict[tetramer] = aux

with open(f'/orozco/projects/proteinBinding/PBM_SELEX/input/electrostatic.txt', 'w') as file:
    for tetra in list(every_tetramer_dict):
        file.write("%s" % tetra)
        for i in range(5):
            file.write("\t%s" % every_tetramer_dict[tetra][i])
        file.write("\n")


the_features = {0: ['diagonal_fce'], 1: ['presence_tetramer'], 2: ['avg'],
                3: ['presence_tetramer', 'avg', 'diagonal_fce'],
                4: ['presence_tetramer', 'avg', 'diagonal_fce', 'electrostatic'],
                5: ['avg', 'diagonal_fce']}
len_aln = len(strings[0])

df_train = pd.read_csv(f'output_rohs/{protein}/SELEX_training.txt', sep='\t')


chosen_features = the_features[4]
model_target = 'octamers'                                 
regressor = 'random_forest'                                
training_set_size = 0.9
randomize_fce = False                                     
score = 'Median_intensity'
selected_tetramers = list(np.arange(0, len_aln-3))

# time
start_time = time.time()
dset_train = Dataset(protein, df_train, model_target, randomize_fce, chosen_features, score, selected_tetramers)
model = Model(dset_train, regressor, training_set_size)
print('the SELEX model has been trained')
print("It took %s seconds" % (time.time() - start_time))

model.predict()
print(model.y_test.shape, model.y_pred.shape)
print('The correlation is ', model.r2)

# plt.savefig(f'output_rohs/{protein}/corr_0vs{cycle}.png')

# features

df = pd.DataFrame(model.features)

index = [k for k in range(model.X.shape[1]) if df[0][k] == 'Presence']
p = sum([df[1][k] for k in index])

index = [k for k in range(model.X.shape[1]) if df[0][k] == 'Electro']
e = sum([df[1][k] for k in index])

shape = 1-e-p

y = np.array([p, e, shape])

fig = plt.gcf()
fig.set_size_inches(8, 8)
labels = ["Presence", "Electrostatic", "Shape"]
patches, texts = plt.pie(y, startangle=0)
plt.legend(patches, labels, loc="best")
plt.savefig(f'output_rohs/{protein}/features.png')

with open(f'output_rohs/htselex_rohs_correlations.txt', 'a') as file:
    file.write("%s\t" % protein)
    file.write("%s\n" % model.r2)


with open(f'output/htselex_features.txt', 'a') as file:
    file.write("%s\t" % protein)
    file.write("%s\t" % p)
    file.write("%s\t" % e)
    file.write("%s\n" % shape)

print(df[0:30])
